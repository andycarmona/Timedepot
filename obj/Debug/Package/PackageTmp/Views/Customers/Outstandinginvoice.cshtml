@using PagedList.Mvc;   @*//import this so we get our HTML Helper*@
@using PagedList;       @*//import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@
@model IEnumerable<TimelyDepotMVC.ModelsView.PurchaseOrdersbyVendor>

<div  class="darkerline01">

    <div style="padding: 10px;">
        @Html.ActionLink("Outstanding Invoice (Excel)", "OutstandingInvoiceExcel", "Customers", new { customerid = ViewBag.CustomerId }, null)
    </div>
    <table class="webgrid" style="width: 1100px; margin: 0px auto;">
        <tr class="webgrid-header">
            <th></th>
            <th style="display: none;">
                @Html.DisplayNameFor(model => model.PurchaseOrderId)
            </th>
            <th>Invoice&nbsp;No.
            @*@Html.DisplayNameFor(model => model.PurchaseOrderNo)*@
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SODate)
            </th>
            <th style="display: block;">Invoice&nbsp;Amount
            @*@Html.DisplayNameFor(model => model.VendorNo)*@
            </th>
            <th>Paid&nbsp;Amount
            @*@Html.DisplayNameFor(model => model.Sub_ItemID)*@
            </th>
            <th>Outstanding&nbsp;Amount
            @*@Html.DisplayNameFor(model => model.Description)*@
            </th>
            <th style="display: none;">
                @Html.DisplayNameFor(model => model.Quantity)
            </th>
            <th style="display: none;">
                @Html.DisplayNameFor(model => model.UnitPrice)
            </th>
        </tr>
        @{
            double dAmount = 0;
            double dPaidAmount = 0;
            double dOutstandingAmount = 0;
            int nRow = 0;
            int nMod = 0;
            string szClass = "";
        }

        @foreach (var item in Model)
        {

            dAmount = Convert.ToDouble(item.VendorNo);
            dPaidAmount = Convert.ToDouble(item.Sub_ItemID);
            dOutstandingAmount = Convert.ToDouble(item.Description);

            nRow++;
            nMod = (nRow % 2);
            if (nMod == 0)
            {
                szClass = "webgrid-alternating-row";
            }
            else
            {
                szClass = "webgrid-row-style";
            }
            <tr class="@szClass">
                <td>
                    @Html.ActionLink("Details", "Edit", "Invoice", new { id = item.PurchaseOrderId }, null)
                </td>
                <td style="display: none;">
                    @Html.DisplayFor(modelItem => item.PurchaseOrderId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PurchaseOrderNo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SODate)
                </td>
                <td style="display: block;">
                    @dAmount.ToString("C")
                    @*@Html.DisplayFor(modelItem => item.VendorNo)*@
                </td>
                <td>
                    @dPaidAmount.ToString("C")
                    @*@Html.DisplayFor(modelItem => item.Sub_ItemID)*@
                </td>
                <td>
                    @dOutstandingAmount.ToString("C")
                    @*@Html.DisplayFor(modelItem => item.Description)*@
                </td>
                <td style="display: none;">
                    @Html.DisplayFor(modelItem => item.Quantity)
                </td>
                <td style="display: none;">
                    @Html.DisplayFor(modelItem => item.UnitPrice)
                </td>
            </tr>
        }
        <tr>
            <td colspan="9">
                <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
                @Html.PagedListPager((IPagedList)ViewBag.OnePageOfData, page => Url.Action("Oustandinginvoice", new { page }))

            </td>
        </tr>

    </table>
</div>
