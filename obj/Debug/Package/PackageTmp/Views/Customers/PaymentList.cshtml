@using PagedList.Mvc;   @*//import this so we get our HTML Helper*@
@using PagedList;       @*//import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@
@model IEnumerable<TimelyDepotMVC.ModelsView.PurchaseOrdersbyVendor>
<div class="darkerline01">

    <div style="padding: 10px;">
        @Html.ActionLink("Payment List (Excel)", "PaymentListExcel", "Customers", new { customerid = ViewBag.CustomerId }, null)
    </div>
    <table class="webgrid" style="width: 1100px; margin: 0px auto;">
        <tr class="webgrid-header">
            <th></th>
            <th style="display: none;">
                @Html.DisplayNameFor(model => model.PurchaseOrderId)
            </th>
            <th>Payment&nbsp;No.
            @*@Html.DisplayNameFor(model => model.PurchaseOrderNo)*@
            </th>
            <th>
                @Html.DisplayNameFor(model => model.SODate)
            </th>
            <th style="display: block;">Invoice&nbsp;No.
            @*@Html.DisplayNameFor(model => model.VendorNo)*@
            </th>
            <th>Payment&nbsp;Type
            @*@Html.DisplayNameFor(model => model.Description)*@
            </th>
            <th>Amount
            @*@Html.DisplayNameFor(model => model.UnitPrice)*@
            </th>
        </tr>
        @{

            int nRow = 0;
            int nMod = 0;
            int nHas = 0;
            int nPos = -1;
            string szClass = "";
            string szError = "";
            string szDecriptedData = "";
            string szDecriptedCode = "";
            string szMsg = "";
        }

        @foreach (var item in Model)
        {
            szError = "";
            szDecriptedData = TimelyDepotMVC.Controllers.PaymentController.DecodeInfo02(item.Description, ref szError);
            if (!string.IsNullOrEmpty(szError))
            {
                nPos = szError.IndexOf("data to decode");
                if (nPos != -1)
                {
                    szDecriptedData = string.Empty;
                }
                else
                {
                    szDecriptedData = string.Format("******");
                }
            }
            else
            {
                //Mask the card number
                nHas = szDecriptedData.Length;
                if (nHas > 4)
                {
                    szMsg = szDecriptedData.Substring(nHas - 4, 4);
                    szDecriptedData = string.Format("******{0}", szMsg);
                }
                else
                {
                    szDecriptedData = string.Format("******");
                }
            }

            nRow++;
            nMod = (nRow % 2);
            if (nMod == 0)
            {
                szClass = "webgrid-alternating-row";
            }
            else
            {
                szClass = "webgrid-row-style";
            }
            <tr class="@szClass">
                <td>
                    @*@Html.ActionLink("Details", "Index", "Payment", new { id = item.PurchaseOrderId }, null)*@
                </td>
                <td style="display: none;">
                    @Html.DisplayFor(modelItem => item.PurchaseOrderId)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.PurchaseOrderNo)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.SODate)
                </td>
                <td style="display: block;">
                    @Html.DisplayFor(modelItem => item.VendorNo)
                </td>
                <td>
                    @*@szDecriptedData*@
                    @Html.DisplayFor(modelItem => item.Description)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.UnitPrice)
                </td>
            </tr>
        }
        <tr>
            <td colspan="8">
                <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
                @Html.PagedListPager((IPagedList)ViewBag.OnePageOfData, page => Url.Action("PaymentList", new { page }))

            </td>
        </tr>

    </table>
</div>
