https://github.com/TroyGoode/PagedList

using PagedList;

        int _pageIndex = 0;
        public int PageIndex
        {
            get { return _pageIndex; }
            set { _pageIndex = value; }
        }

        int _pageSize = 25;
        public int PageSize
        {
            get { return _pageSize; }
            set { _pageSize = value; }
        }


		//En el Index
            int pageIndex = 0;
            int pageSize = PageSize;
            IQueryable<Vendors> qryVendors = null;

            List<Vendors> VendorsList = new List<Vendors>();

            qryVendors = db.Vendors.OrderBy(vd => vd.VendorNo);
            if (qryVendors.Count() > 0)
            {
                foreach (var item in qryVendors)
                {
                    VendorsList.Add(item);
                }
            }

            //Set the page
            if (page == null)
            {
                pageIndex = 1;
            }
            else
            {
                pageIndex = Convert.ToInt32(page);
            }


            var onePageOfData = VendorsList.ToPagedList(pageIndex, pageSize);
            ViewBag.OnePageOfData = onePageOfData;
            return View(VendorsList.ToPagedList(pageIndex, pageSize));

---------------------
@using PagedList.Mvc;   @*//import this so we get our HTML Helper*@
@using PagedList;       @*//import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@

@model IEnumerable<TimelyDepotMVC.Models.Admin.UserRegistration>
        <td>
            @Html.ActionLink("Edit", "Edit", new { id=item.Id }) |
            @Html.ActionLink("Details", "Details", new { id=item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id=item.Id })
        </td>


//Mostar los datos aqui

//El paginador incluir el la pagina o el maestro
@Styles.Render("~/Content/PagedList.css")

    <tr>
        <td colspan="5">
            <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
            @Html.PagedListPager((IPagedList)ViewBag.OnePageOfData, page => Url.Action("Index", new { page }))

        </td>
    </tr>



=====================
using PagedList;

        int _pageIndex = 0;
        public int PageIndex
        {
            get { return _pageIndex; }
            set { _pageIndex = value; }
        }

        int _pageSize = 25;
        public int PageSize
        {
            get { return _pageSize; }
            set { _pageSize = value; }
        }

        public ViewResult Index(int? page)
        {
            int pageIndex = 0;
            int pageSize = PageSize;

            //Set the page
            if (page == null)
            {
                pageIndex = 1;
            }
            else
            {
                pageIndex = Convert.ToInt32(page);
            } .ToPagedList(pageIndex, pageSize)


===============================
@model PagedList.PagedList<Invoicing.Models.Admin.Aliva>
       

 <tr>
            <td colspan="8">
                <table border="0" cellpadding="0" cellspacing="0" style="width: 95%">
                    <tr>
                        <td>
                            <div class="viosLink">
                                Page @(Model.PageCount < Model.PageNumber ? 0 : Model.PageNumber)
                                of @Model.PageCount
                                &nbsp;
                                @if (Model.HasPreviousPage)
                                {
                                    @Html.ActionLink("First", "Index", new { page = 1, sortOrder = ViewBag.CurrentSort })
                                    @Html.Raw("&nbsp;");
                                    @Html.ActionLink("Prev", "Index", new { page = Model.PageNumber - 1, sortOrder = ViewBag.CurrentSort })
                                }
                                else
                                {
@*:<<*@
                                    @Html.Raw("&nbsp;");
@*:Prev*@
                                }
                                &nbsp;
                                @if (Model.HasNextPage)
                                {
                                    @Html.ActionLink("Next", "Index", new { page = Model.PageNumber + 1, sortOrder = ViewBag.CurrentSort })
                                    @Html.Raw("&nbsp;");
                                    @Html.ActionLink("Last", "Index", new { page = Model.PageCount, sortOrder = ViewBag.CurrentSort })
                                }
                                else
                                {
@*:Next*@
                                    @Html.Raw("&nbsp;")
@*:>>*@
                                }
                            </div>
                        </td>
                        <td style="display: none">
                            @Html.ActionLink("Back", "Index")
                        </td>
                    </tr>
                </table>
            </td>
        </tr>
===============================
    <script src="@Url.Content("~/Scripts/globalize.js")"></script>
    <script src="@Url.Content("~/Scripts/cultures/globalize.culture.it-IT.js")"></script>
    <script src="@Url.Content("~/Scripts/globalizeViosWebSite01.js")"></script>