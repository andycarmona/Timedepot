@using PagedList.Mvc;   @*//import this so we get our HTML Helper*@
@using PagedList;       @*//import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@
@model IEnumerable<TimelyDepotMVC.Models.Admin.Payments>

<div style="margin: 0px auto; width: 80%; padding: 5px;">
    <div class="left" style="padding-left: 5px; padding-right: 10px; padding-top: 12px;">
        @Html.ActionLink("Add Payment", "Add", "Payment", null, new { id = "AddPaymentid" })
    </div>
    @using (Html.BeginForm("EditPay", "Payment", null, FormMethod.Post, new { id = "editpayformid" }))
    {
        <div style="margin: 0px auto; width: 100%">
            <table>
                <tr>
                    <td>
                        <div class="left" style="margin-right: 3px; padding-top: 0px;">Search by Payment No.:</div>
                    </td>
                    <td>
                        <input id="searchPaymentNo" name="searchPaymentNo" type="text" value="@ViewBag.SerchPaymentNo" /></td>
                    <td>
                        <input id="btnSubmitSearch" class="btnSubmitSearch" type="submit" value="Search" /></td>
                    <td>@Html.ActionLink("Reset", "EditPay", "Payment", null, new { id = "lnkResetId", @class = "btnSubmitSearch" })</td>
                </tr>
            </table>
        </div>    
    }

</div>
<table class="webgrid">
    <tr class="webgrid-header">
        <th></th>
        <th>
            @Html.DisplayNameFor(model => model.PaymentNo)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CustomerNo)
        </th>
        <th>Company</th>
        <th>
            @Html.DisplayNameFor(model => model.SalesOrderNo)
        </th>
        <th>Invoice&nbsp;No
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PaymentType)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ReferenceNo)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Amount)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PaymentDate)
        </th>
    </tr>
    @{
        int nRow = 0;
        int nMod = 0;
        int nPos = -1;
        int nHas = 0;
        string szClass = "";
        string szDecriptedData = "";
        string szError = "";
        string szCompany = "";
        string szMsg = "";
        string szLnkSelect = "block";
        string szLnkSelect01 = "none";
        string szInvoiceNo = "";

        TimelyDepotMVC.DAL.TimelyDepotContext db01 = new TimelyDepotMVC.DAL.TimelyDepotContext();
    }
    @foreach (var item in Model)
    {
        //Display the select link
        if (item.Amount != null)
        {
            if (item.Amount > 0)
            {
                szLnkSelect = "none";
                szLnkSelect01 = "block";
            }
            else
            {
                szLnkSelect = "block";
                szLnkSelect01 = "none";
            }
        }
        else
        {
            szLnkSelect = "block";
            szLnkSelect01 = "none";
        }

        //Manage the Card Number mask
        szDecriptedData = TimelyDepotMVC.Controllers.PaymentController.DecodeInfo02(item.CreditCardNumber, ref szError);
        if (!string.IsNullOrEmpty(szError))
        {
            nPos = szError.IndexOf("data to decode");
            if (nPos != -1)
            {
                szDecriptedData = string.Empty;
            }
            else
            {
                szDecriptedData = string.Format("******");
            }
        }
        else
        {
            //Mask the card number
            nHas = szDecriptedData.Length;
            if (nHas > 4)
            {
                szMsg = szDecriptedData.Substring(nHas - 4, 4);
                szDecriptedData = string.Format("******{0}", szMsg);
            }
            else
            {
                szDecriptedData = string.Format("******");
            }
        }

        //If Invoice payment, display Invoice No
        szInvoiceNo = string.Empty;
        if (!string.IsNullOrEmpty(item.InvoicePayment))
        {
            if (item.InvoicePayment.ToUpper() == "TRUE")
            {
                TimelyDepotMVC.Models.Admin.Invoice invoice = db01.Invoices.Where(inv => inv.SalesOrderNo == item.SalesOrderNo).First<TimelyDepotMVC.Models.Admin.Invoice>();
                if (invoice != null)
                {
                    szInvoiceNo = invoice.InvoiceNo;
                }
            }
        }

        szCompany = TimelyDepotMVC.Controllers.PaymentController.GetCompanyName(db01, item.CustomerNo);
        nRow++;
        nMod = (nRow % 2);
        if (nMod == 0)
        {
            szClass = "webgrid-alternating-row";
        }
        else
        {
            szClass = "webgrid-row-style";
        }
        <tr class="@szClass">
            <td>
                <div style="display:@szLnkSelect;">
                    @Html.ActionLink("Select", "SelectPayment", new { id = item.Id }) | 
                    @Html.ActionLink("Reset", "ResetPayment", new { id = item.Id })
                </div>
                <div style="display:@szLnkSelect01;">
                    @Html.ActionLink("Edit", "Edit", new { id = item.Id }) | 
                    @Html.ActionLink("Log", "ViewLog", new { id = item.Id }, new { @class = "lnkViewLog" }) | 
                    @Html.ActionLink("Refund", "Refund", new { id = item.Id }, new { @class = "lnkRefundLog" }) | 
                    @Html.ActionLink("Delete", "DeletePayment", new { id = item.Id }, new { onclick = "return confirm('Do you want to delete this payment?');" })
                </div>
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PaymentNo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CustomerNo)
            </td>
            <td>@szCompany</td>
            <td>
                @if (string.IsNullOrEmpty(item.InvoicePayment))
                {
                    @Html.DisplayFor(modelItem => item.SalesOrderNo)                    
                }
            </td>
            <td>
                @szInvoiceNo
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PaymentType)
                @*@szDecriptedData*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReferenceNo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Amount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PaymentDate)
            </td>
        </tr>
    }
    <tr>
        <td colspan="10">
            <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
            @Html.PagedListPager((IPagedList)ViewBag.OnePageOfData, page => Url.Action("Index", new { page, searchPaymentNo = ViewBag.SerchPaymentNo }))

        </td>
    </tr>

</table>
<div style="margin: 0px auto; width: 80%; padding: 5px;">
    <input id="btDialogClose" class="btnSubmitSearch" type="button" value="Close" />
</div>
