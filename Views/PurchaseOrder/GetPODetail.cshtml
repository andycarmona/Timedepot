@using PagedList.Mvc;   @*//import this so we get our HTML Helper*@
@using PagedList;       @*//import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@
@model IEnumerable<TimelyDepotMVC.Models.Admin.PurchasOrderDetail>

<div style="border: 1px solid #BABDB6; margin: 10px 30px 5px 30px;">
    <div style="margin: 5px; display: none;">
        @Html.ActionLink("Add Detail", "AddDetail", "PurchaseOrder", new { purchaseorderid = ViewBag.PurchaseOrderId }, new { id = "lnkAddSalesOrderDetail" })
    </div>
    <table class="webgrid" style="margin: 5px auto; width: 100%;">
        <tr class="webgrid-header">
            <th></th>
            <th>
                @*@Html.DisplayNameFor(model => model.Sub_ItemID)*@
                Our&nbsp;Item&nbsp;#
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th>
                @*@Html.DisplayNameFor(model => model.VendorReference)*@
                Your Item
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UnitPrice)
            </th>
            <th>Total</th>
        </tr>
        @{
            double dTotal = 0;
            int nRow = 0;
            int nMod = 0;
            string szClass = "";
            string szQty = "";
            string szPrice = "";
            string szSubItem = "";
            string szDescription = "";
            string szRef = "";
            string szlnkId = "";
        }
        @foreach (var item in Model)
        {
            szQty = string.Format("qty_{0}", item.Id);
            szPrice = string.Format("price_{0}", item.Id);
            szSubItem = string.Format("subitem_{0}", item.Id);
            szDescription = string.Format("desc_{0}", item.Id);
            szRef = string.Format("ref_{0}", item.Id);
            szlnkId = string.Format("lnkid_{0}", item.Id);
            
            
            dTotal = Convert.ToDouble(item.Quantity) * Convert.ToDouble(item.UnitPrice);

            nRow++;
            nMod = (nRow % 2);
            if (nMod == 0)
            {
                szClass = "webgrid-alternating-row";
            }
            else
            {
                szClass = "webgrid-row-style";
            }
                <tr class="@szClass">
                    <td>
                        <span class="lnkAddDetail">@Html.ActionLink("Add", "AddItem", "PurchaseOrder", new { itemPos = item.ItemPosition, itemOrder = item.ItemOrder }, null)</span> |
                        @Html.ActionLink("Insert", "InsertItem", "PurchaseOrder", new { purchaseorderid = ViewBag.PurchaseOrderId, itemPos = item.ItemPosition, itemOrder = item.ItemOrder }, null) |
                        <div class="lnkEditDetail">@Html.ActionLink("Update", "EditDetail", "PurchaseOrder", new { id = item.Id, purchaseorderid = ViewBag.PurchaseOrderId }, new { id= szlnkId })</div>
                        <div style="display: block;">@Html.ActionLink("Delete", "DeleteDetail", new { id = item.Id }, new {onclick = "return confirm('Do you want to delete this detail?');" })</div>
                    </td>
                    <td>
                        <div id="@szSubItem" class="viosinput180">@Html.EditorFor(modelItem => item.Sub_ItemID)</div>
                    </td>
                    <td>
                        <div id="@szDescription" class="viosinput300">@Html.EditorFor(modelItem => item.Description)</div>
                    </td>
                    <td>
                        <div id="@szRef" class="viosinput180">@Html.EditorFor(modelItem => item.VendorReference)</div>
                    </td>
                    <td>
                        <div id="@szQty" class="viosinput80 lkpodetailQty">@Html.EditorFor(modelItem => item.Quantity)</div>
                    </td>
                    <td>
                        <div id="@szPrice" class="viosinput80">@Html.EditorFor(modelItem => item.UnitPrice)</div>
                    </td>
                    <td style="text-align: right; width: 180px;">@dTotal.ToString("C")</td>
                </tr>

        }
        <tr>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td></td>
            <td style="text-align: right;">Total</td>
            <td style="text-align: right; width: 180px;">@ViewBag.TotalPO</td>
        </tr>
        <tr>
            <td colspan="7">
                <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
                @Html.PagedListPager((IPagedList)ViewBag.OnePageOfData, page => Url.Action("Index", new { page }))

            </td>
        </tr>

    </table>
</div>
