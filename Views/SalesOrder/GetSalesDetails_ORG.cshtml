@using PagedList.Mvc;   @*//import this so we get our HTML Helper*@
@using PagedList;       @*//import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@
@model IEnumerable<TimelyDepotMVC.Models.Admin.SalesOrderDetail>

<div style="border: 1px solid #BABDB6; margin: 10px 30px 5px 30px;">
    <div style="margin: 5px auto; width: 100%; display: none;">
        @Html.ActionLink("Add Detail", "AddDetail", "SalesOrder", new { salesorderid = ViewBag.SalesOrderId }, new { id = "lnkAddSalesOrderDetail" })
    </div>
    <table class="webgrid" style="margin: 5px auto; width: 100%;">
        <tr class="webgrid-header">
            <th></th>
            <th style="display: none;">
                @Html.DisplayNameFor(model => model.SalesOrderId)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Quantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.ShipQuantity)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.BackOrderQuantity)
            </th>
            <th>Item No.
                @*@Html.DisplayNameFor(model => model.Sub_ItemID)*@
            </th>
            <th style="display: none;">
                @Html.DisplayNameFor(model => model.ItemPosition)
            </th>
            <th style="display: none;">
                @Html.DisplayNameFor(model => model.ItemOrder)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.Description)
            </th>
            <th style="display: none;">
                @Html.DisplayNameFor(model => model.Tax)
            </th>
            <th>
                @Html.DisplayNameFor(model => model.UnitPrice)
            </th>
            <th>Ext. Amount</th>
        </tr>
        @{
            int nRow = 0;
            int nMod = 0;
            double dExtAmount = 0;
            string szClass = "";
            string szExtAmount = "";
            string szQty = "";
            string szShipQty = "";
            string szBOQty = "";
            string szDescription = "";
            string szTax = "";
            string szPrice = "";
            string szLnkUpdate = "";
            string szProductService = "product";
        }

        @foreach (var item in Model)
        {
            szQty = string.Format("qty_{0}", item.Id);
            szShipQty = string.Format("shipqty_{0}", item.Id);
            szBOQty = string.Format("boqty_{0}", item.Id);
            szDescription = string.Format("desc_{0}", item.Id);
            szTax = string.Format("tax_{0}", item.Id);
            szPrice = string.Format("price_{0}", item.Id);
            szLnkUpdate = string.Format("lkup_{0}", item.Id);

            // the tax should be on product only, no tax on service
            if (string.IsNullOrEmpty(item.Sub_ItemID))
            {
                szProductService = "service";
            }
            else
            {
                szProductService = "product";
            }

            nRow++;
            nMod = (nRow % 2);
            if (nMod == 0)
            {
                szClass = "webgrid-alternating-row";
            }
            else
            {
                szClass = "webgrid-row-style";
            }

            dExtAmount = Convert.ToDouble(item.UnitPrice) * Convert.ToDouble(item.Quantity);
            szExtAmount = dExtAmount.ToString("C");

            <tr class="@szClass">
                <td>
                    <span class="lnkAddDetail">@Html.ActionLink("Add", "AddItem", "SalesOrder", new { itemPos = item.ItemPosition, itemOrder = item.ItemOrder }, null)</span> |
                        @Html.ActionLink("Insert", "InsertItem", "SalesOrder", new { salesorderid = ViewBag.SalesOrderId, itemPos = item.ItemPosition, itemOrder = item.ItemOrder }, null) |
                        <span class="lnkUpdateDetail">@Html.ActionLink("Update", "UpdateDetail", "SalesOrder", new { id = item.Id, salesorderid = ViewBag.SalesOrderId }, new { id = szLnkUpdate })</span>
                    @Html.ActionLink("Delete", "DeleteDetail", "SalesOrder", new { id = item.Id }, new { onclick = "return confirm('Are you sure you want to delete this item?');" })
                    @*                    <div class="lnkEditDetail">
                            @Html.ActionLink("Edit", "EditDetail", "SalesOrder", new { id = item.Id }, null) |
                        </div>*@
                </td>
                <td style="display: none;">
                    @Html.DisplayFor(modelItem => item.SalesOrderId)
                </td>
                <td id="@szQty" class="tdsalesdetail viosinput60 lksalesdetailQty">
                    @*@Html.DisplayFor(modelItem => item.Quantity)*@
                    @Html.EditorFor(modelItem => item.Quantity)
                </td>
                <td id="@szShipQty" class="tdsalesdetail viosinput60">
                    @Html.EditorFor(modelItem => item.ShipQuantity)
                </td>
                <td id="@szBOQty" class="tdsalesdetail viosinput60">
                    @Html.EditorFor(modelItem => item.BackOrderQuantity)
                </td>
                <td>
                    @Html.DisplayFor(modelItem => item.Sub_ItemID)
                </td>
                <td style="display: none;">
                    @Html.DisplayFor(modelItem => item.ItemPosition)
                </td>
                <td style="display: none;">
                    @Html.DisplayFor(modelItem => item.ItemOrder)
                </td>
                <td id="@szDescription" class="viosinput300">
                    @Html.EditorFor(modelItem => item.Description)
                </td>
                <td id="@szTax" class="tdsalesdetail viosinput60"  style="display:none;">
                    <div class="@szProductService">
                        @Html.EditorFor(modelItem => item.Tax)
                    </div>
                </td>
                <td id="@szPrice" class="tdsalesdetail">
                    @Html.EditorFor(modelItem => item.UnitPrice)
                </td>
                <td class="tdsalesdetail">@szExtAmount</td>
            </tr>
            
        }
        <tr>
            <td colspan="7">
                <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
                @Html.PagedListPager((IPagedList)ViewBag.OnePageOfData, page => Url.Action("GetSalesDetails", new { page }))

            </td>
        </tr>

    </table>
</div>
