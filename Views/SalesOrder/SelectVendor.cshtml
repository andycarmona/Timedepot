@using PagedList.Mvc;   @*//import this so we get our HTML Helper*@
@using PagedList;       @*//import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@
@model IEnumerable<TimelyDepotMVC.Models.Admin.VendorsSalesContact>

<div style="margin: 0px auto; width: 90%">
    <div class="left" style="margin-right: 3px; padding-top: 10px;">Search by Company Name:</div>
    <input id="searchItemVendor" name="searchItemVendor" type="text" value="@ViewBag.SearchItemVendor" />
    <input id="btnSubmitSearchVendorid" class="btNavTimley" type="button" value="Search" />
    <span class="btnSubmitSearchVendor">
        @Html.ActionLink("Reset", "SelectVendor", "SalesOrder", null, new { id = "lnkResetVendorId", @class = "btNavTimley" })
    </span>
</div>

<table class="webgrid" style="margin: 5px auto; width: 90%;">
    <tr class="webgrid-header">
        <th></th>
        <th style="display: none;">
            @Html.DisplayNameFor(model => model.VendorId)
        </th>
        <th>
            @*@Html.DisplayNameFor(model => model.CompanyName)*@
            Company Name
        </th>
        <th>
            @Html.DisplayNameFor(model => model.FirstName)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.LastName)
        </th>
        <th >
            @Html.DisplayNameFor(model => model.Address)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.City)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.State)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Zip)
        </th>
    </tr>
    @{
        string szItemId = "";
        string szCompany = "";
        string szFirstName = "";
        string szLastName = "";
        string szAddress = "";
        string szCity = "";
        string szState = "";
        string szZip = "";

        int nRow = 0;
        int nMod = 0;
        string szClass = "";
        string szCompanyName = "";
        TimelyDepotMVC.DAL.TimelyDepotContext db01 = new TimelyDepotMVC.DAL.TimelyDepotContext();
    }

    @foreach (var item in Model)
    {
        szItemId = string.Format("itm_{0}", item.Id);
        szCompany = string.Format("cmp_{0}", item.Id);
        szFirstName = string.Format("fn_{0}", item.Id);
        szLastName = string.Format("ln_{0}", item.Id);
        szAddress = string.Format("adr_{0}", item.Id);
        szCity = string.Format("cty_{0}", item.Id);
        szState = string.Format("sta_{0}", item.Id);
        szZip = string.Format("zp_{0}", item.Id);

        szCompanyName = TimelyDepotMVC.Controllers.SalesOrderController.GetCompanyName(db01, item.VendorId.ToString());
        
        nRow++;
        nMod = (nRow % 2);
        if (nMod == 0)
        {
            szClass = "webgrid-alternating-row";
        }
        else
        {
            szClass = "webgrid-row-style";
        }

        <tr class="@szClass">
            <td class="lnkSelectVendor">
                @Html.ActionLink("Select", "Details", new { id = item.Id })
            </td>
            <td id="@szItemId" style="display: none;">
                @Html.DisplayFor(modelItem => item.VendorId)
            </td>
            <td id="@szCompany">
                @*@Html.DisplayFor(modelItem => item.CompanyName)*@
                @szCompanyName
            </td>
            <td id="@szFirstName">
                @Html.DisplayFor(modelItem => item.FirstName)
            </td>
            <td id="@szLastName">
                @Html.DisplayFor(modelItem => item.LastName)
            </td>
            <td id="@szAddress">
                @Html.DisplayFor(modelItem => item.Address)
            </td>
            <td id="@szCity">
                @Html.DisplayFor(modelItem => item.City)
            </td>
            <td id="@szState">
                @Html.DisplayFor(modelItem => item.State)
            </td>
            <td id="@szZip">
                @Html.DisplayFor(modelItem => item.Zip)
            </td>
        </tr>
    }
    <tr>
        <td colspan="4">
            <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
            @Html.PagedListPager((IPagedList)ViewBag.OnePageOfData, page => Url.Action("SelectVendor", new { page }))

        </td>
    </tr>
    <tr>
        <td colspan="4" style="padding: 5px;">
            <input id="btDialogClose" class="btNavTimley" type="button" value="Close" /></td>
    </tr>
</table>
