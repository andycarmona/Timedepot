@using PagedList.Mvc;   @*//import this so we get our HTML Helper*@
@using PagedList;       @*//import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@
@model IEnumerable<TimelyDepotMVC.Models.Admin.InvoiceDetailSRC>

<div style="margin: 10px 5px 5px 5px;">
    @{
        int nRow = 0;
        int nMod = 0;
        double dExtAmountSC = 0;
        double dExtAmountRC = 0;
        double dExtAmountTotal = 0;
        double dExtAmount = 0;
        double quantity = 0.0;
        int originalQuantity = 0;
        int shippedQty = 0;
        string szClass = "";
        string szExtAmount = "";
        string szExtAmountSC = "";
        string szExtAmountRC = "";
        string szExtAmountTotal = "";
        string szQty = "";
        string szShipQty = "";
        string szBOQty = "";
        string szDescription = "";
        string szTax = "";
        string szPrice = "";
        string szLnkUpdate = "";
        string szLnkShiped = "";
        string szProductService = "product";

        string szPicPath = "";
        string szLogo = "";
        string szImprint = "";
        string szImprintSelector = "";
        string szQtySCid = "";
        string szQtyRCid = "";
        string szPriceSC = "";
        string szPriceRC = "";
        var counter = 0;
    }

    @foreach (var item in Model)
    {
        counter++;
        szQty = string.Format("qty_{0}", item.Id);
        szShipQty = string.Format("shipqty_{0}", item.Id);
        szBOQty = string.Format("boqty_{0}", item.Id);
        szDescription = string.Format("desc_{0}", item.Id);
        szTax = string.Format("tax_{0}", item.Id);
        szPrice = string.Format("price_{0}", item.Id);
        szLnkUpdate = string.Format("lkup_{0}", item.Id);
        szLnkShiped = string.Format("lkshiped_{0}", item.Id);


        szLogo = string.Format("logo_{0}", item.Id);
        szImprint = string.Format("ipmt_{0}", item.Id);
        szImprintSelector = string.Format("ipmtselect_{0}", item.Id);
        szQtySCid = string.Format("qtySC_{0}", item.Id);
        szQtyRCid = string.Format("qtyRC_{0}", item.Id);
        szPriceSC = string.Format("priceSC_{0}", item.Id);
        szPriceRC = string.Format("priceRC_{0}", item.Id);


        //Set the image path
        szPicPath = string.Format("~/Images/timely/Small_Pic/{0}.gif", item.ItemID);
        szPicPath = Url.Content(szPicPath);

        // the tax should be on product only, no tax on service
        if (string.IsNullOrEmpty(item.Sub_ItemID))
        {
            szProductService = "service";
        }
        else
        {
            szProductService = "product";
        }

        nRow++;
        nMod = (nRow % 2);
        if (nMod == 0)
        {
            szClass = "webgrid-alternating-row";
        }
        else
        {
            szClass = "webgrid-row-style";
        }

        dExtAmount = Convert.ToDouble(item.UnitPrice) * Convert.ToDouble(item.Quantity);
        szExtAmount = dExtAmount.ToString("C");
        dExtAmountSC = Convert.ToDouble(item.UnitPricSRC) * Convert.ToDouble(item.QuantitySC);
        szExtAmountSC = dExtAmountSC.ToString("C");
        dExtAmountRC = Convert.ToDouble(item.UnitPriceRC) * Convert.ToDouble(item.QuantityRC);
        szExtAmountRC = dExtAmountRC.ToString("C");

        dExtAmountTotal = dExtAmount + dExtAmountSC + dExtAmountRC;
        szExtAmountTotal = dExtAmountTotal.ToString("C");


        //dExtAmount = Convert.ToDouble(item.UnitPrice) * Convert.ToDouble(item.Quantity);
        //szExtAmount = dExtAmount.ToString("C");

        <div class="cf" style="margin-bottom: 5px;">
            <div class="left" style="display: none;">
                @Html.DisplayFor(modelItem => item.Id)
            </div>
            <div class="left" style="display: none;">
                @Html.DisplayFor(modelItem => item.SalesOrderId)
            </div>
            <div class="left detailShipment" style="margin-left: 5px; margin-right: 5px;">@Html.ActionLink("X", "DeleteDetail", "Invoice", new { id = item.Id }, new { onclick = "return confirm('Are you sure you want to delete this item?');", @class = "btn btn-default" })</div>
            <div class="left" style="width: 300px; margin-right: 0.5em;">
                Item No.:&nbsp;@Html.DisplayFor(modelItem => item.Sub_ItemID)
            </div>
            <div id="@szDescription" class="left">
                Logo:&nbsp;@Html.DisplayFor(modelItem => item.Logo, new { Style = "width:500px;" })
            </div>
        </div>
        <div class="darkerline" style="padding: 5px; margin-bottom: 5px;">
            <div class="edititemhlpdiv cf">
                <div class="left">
                    <div style="width: 160px; margin: 0px auto;">
                        <img id="picImageId" alt="@item.ItemID" src="@szPicPath" width="160" />
                    </div>
                </div>
                <div class="left teshipment" style="margin-left: 10px;">
                    <div style="text-align: center">Logo</div>
                    <div style="margin-top: 5px;">
                        <div id="@szLogo" class="editor-field">
                            @Html.TextBoxFor(modelItem => item.Logo, new { style = "width:350px;" })
                            @Html.ValidationMessageFor(modelItem => item.Logo)
                        </div>
                    </div>
                    <div>
                        <div class="left" style="margin-right: 5px;">Imprint Method</div>
                        <div>
                            @if (ViewBag.ImprintList != null)
                            {
                                @Html.DropDownList("ImprintMethod", (IEnumerable<SelectListItem>)ViewBag.ImprintList, "Select", new { id = szImprintSelector, @class = "imprintselectorclass" })
                            }
                            <div id="@szImprint" class="editor-field">
                                @Html.TextBoxFor(modelItem => item.ImprintMethod, new { style = "width:180px;" })
                                @Html.ValidationMessageFor(modelItem => item.ImprintMethod)
                            </div>
                        </div>
                    </div>
                </div>
                <div class="left" style="margin-bottom:25px;">
                    <table>
                        <tr class="paddLR">
                            <td>Req. Qty</td>
                            <td>Ship Qty</td>
                            @*<td>B.O. Qty</td>*@
                            <td>Remaining Qty</td>
                            <td>Unit Price</td>
                            <td>Shipped Amount</td>
                        </tr>
                        <tr class="paddLR">
                            <td>
                                @*<div id="@szQty" class="viosinput100">*@
                                @{
                                    var divQuantityId = "divQuantity" + counter;
                                  
                                }
                                <div id='@szQty'  class="viosinput100">

                                    @Html.TextBoxFor(modelItem => item.Quantity, new { @class = "shippingQuantity", @idAttr = counter, @originalQuantity = item.Quantity, @id = "txtQuantity" + counter })
                                </div>
                            </td>
                            <td>
                                <div id="@szShipQty" data-salesorder-id="@szShipQty" class="viosinput100">
                                    @Html.TextBoxFor(modelItem => item.ShipQuantity, new { @class = "shipqty", @id = "txtShipQuantity" + counter, @idAttr = counter, @max = item.Quantity, @min = 1 })
                                    @Html.ValidationMessageFor(model => item.ShipQuantity)
                                    <span style="display: none;" id="result_@szShipQty">@item.ShipQuantity</span>
                                </div>
                            </td>
                            <td>
                                @{ var divRemainingQuantityId = "divRemainingQuantity" + counter; }
                                <div id='@divRemainingQuantityId' class="viosinput100">
                                    @{
                                 quantity = (double)(item.Quantity - item.ShipQuantity);
                                 shippedQty = (int)item.ShipQuantity;
                                    }

                                    @Html.DisplayFor(modelItem => quantity)
                                </div>
                            </td>
                            <td>
                                @*<div id="@szPrice" class="viosinput100 textright">*@
                                @{ var divUnitPriceId = "divUnitPrice" + counter; }
                                <div id='@divUnitPriceId' class="viosinput100">
                                    @Html.DisplayFor(modelItem => item.UnitPrice, new { @class = "textright" })
                                    @Html.ValidationMessageFor(model => item.UnitPrice)
                                </div>
                            </td>
                            @*<td class="textright">@szExtAmount</td>*@
                            @{
                                 var divId = "divShippedAmount" + counter;
                                 var price = item.UnitPrice.GetValueOrDefault() * Convert.ToDecimal(item.ShipQuantity.GetValueOrDefault());
                            }
                            <td class="textright"><div id='@divId'>@price.ToString("0.00")</div></td>
                        </tr>
                        <tr class="paddLR teshipment">
                            <td colspan="2" style="text-align: right;">Set up Charge</td>
                            <td>
                                <div id="@szQtySCid" class="viosinput100">
                                    @Html.TextBoxFor(modelItem => item.QuantitySC, new { @class = "textright" })
                                    @Html.ValidationMessageFor(model => item.QuantitySC)
                                </div>
                            </td>
                        </tr>
                        <tr class="paddLR teshipment">
                            <td colspan="2" style="text-align: right;">Run Charge</td>
                            <td>
                                <div id="@szQtyRCid" class="viosinput100 textright">
                                    @Html.TextBoxFor(modelItem => item.QuantityRC, new { @class = "textright" })
                                    @Html.ValidationMessageFor(model => item.QuantityRC)
                                </div>
                            </td>
                        </tr>
                    </table>

                </div>
                <div id="@szLnkShiped" style="margin: 5px auto; width: 300px; display: block; text-align: center">
                    <span class="lnkUpdateDetail detailShipmentUpdate">@Html.ActionLink("Update", "UpdateDetail", "Invoice", new { id = item.Id, salesorderid = ViewBag.SalesOrderId}, new { id = szLnkUpdate, @class = "btn btn-default" })</span>
                    <span style="float:left;" class="lnkShipItem">
                        <button class="btn btn-default" data-salesorder=@ViewBag.SalesOrderId data-itemid="@item.Id" data-shipquantity="@shippedQty" type="button" value="Ship item" id="@szLnkUpdate" style="display:none;">Ship item</button>

                    </span>&nbsp;
                </div>
            </div>
            <div id="@szTax" class="tdsalesdetail viosinput60" style="display:none;">
                <div class="@szProductService">
                    @Html.EditorFor(modelItem => item.Tax)
                </div>
            </div>
        </div>

    }

    <div style="margin: 5px auto; width: 40px; display: block;">
        @Html.ActionLink("Add", "AddDetail", "Invoice", new { salesorderid = ViewBag.SalesOrderId }, new { id = "lnkAddSalesOrderDetail", @class = "btn btn-default" })
    </div>
    <div id="shippeditemsdiv" style="display:none;">
        @ViewBag.ShippedItems
    </div>
</div>

<script type="text/javascript">
    $(document).ready(function () {
        $('.shippingQuantity').blur(function () {
            var id = $(this).attr('idAttr');
            var originalQty = parseInt($('#txtQuantity' + id).val().trim());
            var shippingQuantity = parseInt($('#txtShipQuantity' + id).val().trim());
            var remainingQty = originalQty - shippingQuantity;
            if (originalQty > 0 && shippingQuantity <= originalQty) {
                if (remainingQty >= 0) {
                    //$(this).attr("originalquantity", chosen);
                    $('#divRemainingQuantity' + id).html(remainingQty);
                }
            }
            else {
                alert('Quantity should be greater than 0 and less than or equals to quantity available.');
                $('#txtQuantity' + id).val(shippingQuantity);
                $('#divRemainingQuantity' + id).html(0);
            }
        });
        $('.shipqty').blur(function () {
            var id = $(this).attr('idAttr');
            var originalQty = parseInt($('#txtQuantity' + id).val().trim());
            var salesorderId = $(this).parent().attr("data-salesorder-id").split("_")[1];
            var shippingQuantity = parseInt($('#txtShipQuantity' + id).val().trim());
            var remainingQty = originalQty - shippingQuantity;
            var splitprice = $('#divUnitPrice' + id).text().trim().split(" ");
            var unitPrice = numeral().unformat(splitprice[0]);
            //parseFloat(splitprice[0].replace('.', ',').replace(' ', '')).toFixed(2);
            $("#result_shipqty_" + salesorderId).text(shippingQuantity);

            if (shippingQuantity > 0 && shippingQuantity <= originalQty) {
                if (remainingQty >= 0) {
                    //$(this).attr("originalquantity", chosen);
                    $('#divRemainingQuantity' + id).html(remainingQty);
                    $('#divShippedAmount' + id).html((unitPrice * shippingQuantity));
                }
            }
            else {
                    alert('Shipment quantity should be greater than 0 and less than or equals to quantity available.');
                $('#txtShipQuantity' + id).val(1);
                    $('#divRemainingQuantity' + id).html(originalQty-1);
                    $('#divShippedAmount' + id).html(unitPrice);
            }
        });
    });

</script>
