@using PagedList.Mvc;   @*//import this so we get our HTML Helper*@
@using PagedList;       @*//import this so we can cast our list to IPagedList (only necessary because ViewBag is dynamic)*@
@model IEnumerable<TimelyDepotMVC.Models.Admin.Payments>

@{
    ViewBag.Title = "Payments";
    Layout = "~/Views/Shared/_LayoutAdmin.cshtml";
}

<h2>@ViewBag.Title</h2>

<p>
    @Html.ActionLink("Create New", "Create")
</p>
<table>
    <tr>
        <th></th>
        <th>Id</th>
        <th>
            @Html.DisplayNameFor(model => model.PaymentNo)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CustomerNo)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.SalesOrderNo)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PaymentType)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.CreditCardNumber)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.ReferenceNo)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.Amount)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.PaymentDate)
        </th>
        <th>
            @Html.DisplayNameFor(model => model.InvoicePayment)
        </th>
    </tr>
    @{
        int nHas = 0;
        int nPos = -1;
        string szError = "";
        string szDecriptedData = "";
        string szDecriptedCode = "";
        string szMsg = "";
    }

    @foreach (var item in Model)
    {
        szError = "";
        szDecriptedData = TimelyDepotMVC.Controllers.PaymentController.DecodeInfo02(item.CreditCardNumber, ref szError);
        if (!string.IsNullOrEmpty(szError))
        {
            nPos = szError.IndexOf("data to decode");
            if (nPos != -1)
            {
                szDecriptedData = string.Empty;
            }
            else
            {
                szDecriptedData = string.Format("******");
            }
        }
        else
        {
            //Mask the card number
            nHas = szDecriptedData.Length;
            if (nHas > 4)
            {
                szMsg = szDecriptedData.Substring(nHas - 4, 4);
                szDecriptedData = string.Format("******{0}", szMsg);
            }
            else
            {
                szDecriptedData = string.Format("******");
            }
        }

        <tr>
            <td>
                @Html.ActionLink("Edit", "Edit", new { id = item.Id }) |
            @Html.ActionLink("Details", "Details", new { id = item.Id }) |
            @Html.ActionLink("Delete", "Delete", new { id = item.Id })
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Id)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PaymentNo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.CustomerNo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.SalesOrderNo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PaymentType)
            </td>
            <td>
                @szDecriptedData
                @*@Html.DisplayFor(modelItem => item.PaymentType)*@
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.ReferenceNo)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.Amount)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.PaymentDate)
            </td>
            <td>
                @Html.DisplayFor(modelItem => item.InvoicePayment)
            </td>
        </tr>
    }
    <tr>
        <td colspan="10">
            <!-- output a paging control that lets the user navigation to the previous page, next page, etc -->
            @Html.PagedListPager((IPagedList)ViewBag.OnePageOfData, page => Url.Action("Index", new { page }))

        </td>
    </tr>

</table>
