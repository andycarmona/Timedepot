@model TimelyDepotMVC.Models.Admin.Invoice
<style>
    .labelClass
    {
        width: 95px;
        padding-top: 10px;
    }
</style>
@using (Html.BeginForm(null, null, null, FormMethod.Post, new { id = "editsalesorderid" }))
{ 
    @Html.AntiForgeryToken()
    @Html.ValidationSummary(true)

    @Html.HiddenFor(model => model.InvoiceId)
    @Html.HiddenFor(model => model.InvoiceNo)
    @Html.HiddenFor(model => model.SalesOrderId)
    @Html.HiddenFor(model => model.CustomerId)
    @Html.HiddenFor(model => model.SalesOrderNo)
    @Html.HiddenFor(model => model.InvoiceDate)
    @Html.HiddenFor(model => model.PaymentAmount)
    @Html.HiddenFor(model => model.PaymentDate)    

    TimelyDepotMVC.DAL.TimelyDepotContext db01 = new TimelyDepotMVC.DAL.TimelyDepotContext();
    string szAsi = "";
    string szSAGE = "";
    string szWebSite = "";
    string szEmail = "";

    string szAddress = "";
    string szAddressHlp = "";
    string szAddressHlp1 = "";
    string szAddressHlp2 = "";
    string szAddressHlp3 = "";
    string szCompany = "";
    string szAddressHlp4 = "";
    string szAddressHlp5 = "";
    string szAddressHlp6 = "";
    string szCompany2 = "";
    string szCity = "";
    string szState = "";
    string szZip = "";
    string szCountry = "";
    string szCountry2 = "";
    string szTel2 = "";
    string szTel = "";
    string szFax = "";
    string szWebSiteTrade = "";
    string szEmailTrade = "";
    string szFirstName = "";
    string szLastName = "";
    string szFirstName2 = "";
    string szLastName2 = "";
    string szTradeName = "";
    string szAsiTrade = "";
    string szSageTrade = "";
    string szPpaiTrade = "";
    string szMsg = "";
    string szMsg01 = "";
    string szInvoiceDate = "";
    string szShippedDate = "";
    string szSalesOrderContact = "";
    string szBillto = "";
    DateTime dInvoiceDate = DateTime.Now;

    if (Model.InvoiceDate == null)
    {
        dInvoiceDate = DateTime.Now;
        szInvoiceDate = dInvoiceDate.ToString("MM/dd/yyyy"); ;
    }
    else
    {
        dInvoiceDate = Convert.ToDateTime(Model.InvoiceDate);
        szInvoiceDate = dInvoiceDate.ToString("MM/dd/yyyy");
    }
    if (Model.ShipDate == null)
    {
        dInvoiceDate = DateTime.Now;
        szShippedDate = dInvoiceDate.ToString("MM/dd/yyyy"); ;
    }
    else
    {
        dInvoiceDate = Convert.ToDateTime(Model.ShipDate);
        szShippedDate = dInvoiceDate.ToString("MM/dd/yyyy");
    }

    long telHlp = 0;
    long faxHlp = 0;
    string telfmt = "000-000-0000";

    TimelyDepotMVC.Controllers.SalesOrderController.GetCustomerData(db01, ref szAsi, ref szSAGE, ref szWebSite, ref szEmail, Convert.ToInt32(Model.CustomerId));
    TimelyDepotMVC.Controllers.SalesOrderController.GetTradeData(db01, ref szAddress, ref szCity, ref szState, ref szZip, ref szCountry, ref szTel, ref szFax,
        ref szWebSiteTrade, ref szEmailTrade, ref szTradeName, ref szAsiTrade, ref szSageTrade, ref szPpaiTrade, Convert.ToInt32(Model.TradeId));
    if (string.IsNullOrEmpty(szTel))
    {
        szTel = "0";
    }
    if (string.IsNullOrEmpty(szFax))
    {
        szFax = "0";
    }
    telHlp = Convert.ToInt64(szTel);
    szTel = telHlp.ToString(telfmt);
    telHlp = Convert.ToInt64(szFax);
    szFax = telHlp.ToString(telfmt);


    TimelyDepotMVC.Models.Admin.CustomersContactAddress soldto = null;
    if (ViewBag.SoldTo != null)
    {
        soldto = ViewBag.SoldTo;
    }
    else
    {
        soldto = new TimelyDepotMVC.Models.Admin.CustomersContactAddress();
    }

    TimelyDepotMVC.Models.Admin.VendorsContactAddress venaddress = null;
    if (ViewBag.VendorAddress != null)
    {
        venaddress = ViewBag.VendorAddress;
    }
    else
    {
        venaddress = new TimelyDepotMVC.Models.Admin.VendorsContactAddress();
    }

    if (!string.IsNullOrEmpty(venaddress.State))
    {
        venaddress.State = string.Format(", {0}", venaddress.State);
    }
    szAddressHlp = string.Format("{0}{1} {2}", venaddress.City, venaddress.State, venaddress.Zip);

    TimelyDepotMVC.Models.Admin.CustomersBillingDept billto = null;
    if (ViewBag.BillTo != null)
    {
        billto = ViewBag.BillTo;
    }
    else
    {
        billto = new TimelyDepotMVC.Models.Admin.CustomersBillingDept();
    }

    TimelyDepotMVC.Models.Admin.CustomersShipAddress shipto = null;
    if (ViewBag.ShipTo != null)
    {
        shipto = ViewBag.ShipTo;
    }
    else
    {
        shipto = new TimelyDepotMVC.Models.Admin.CustomersShipAddress();
    }

    if (!string.IsNullOrEmpty(shipto.State))
    {
        shipto.State = string.Format(", {0}", shipto.State);
    }
    szAddressHlp1 = string.Format("{0}{1} {2}", shipto.City, shipto.State, shipto.Zip);

    TimelyDepotMVC.Models.Admin.VendorsSalesContact vendorsalescontact = null;
    if (ViewBag.VendorSalesContact != null)
    {
        vendorsalescontact = ViewBag.VendorSalesContact;
    }
    else
    {
        vendorsalescontact = new TimelyDepotMVC.Models.Admin.VendorsSalesContact();
    }

    TimelyDepotMVC.Models.Admin.SalesOrderBlindShip salesorderblindship = null;
    if (ViewBag.BlindShip != null)
    {
        salesorderblindship = ViewBag.BlindShip;
    }
    else
    {
        salesorderblindship = new TimelyDepotMVC.Models.Admin.SalesOrderBlindShip();
    }

    //Select Blind ship or Trade name
    if (Model.IsBlindShip)
    {
        //szFirstName = salesorderblindship.FirstName;
        //szLastName = salesorderblindship.LastName;
        //szAddressHlp2 = string.Format("{0} {1}", salesorderblindship.Address1, salesorderblindship.Address2);
        //szAddressHlp3 = string.Format("{0}{1} {2}", salesorderblindship.City, salesorderblindship.State, salesorderblindship.Zip);

        szFirstName = soldto.FirstName;
        szLastName = soldto.LastName;
        szCompany = soldto.CompanyName;
        szAddressHlp2 = string.Format("{0}", soldto.Address);
        szAddressHlp3 = string.Format("{0} {1} {2}", soldto.City, soldto.State, soldto.Zip);


        szFirstName2 = salesorderblindship.FirstName;
        szLastName2 = salesorderblindship.LastName;
        szCompany2 = salesorderblindship.Title;
        szAddressHlp4 = string.Format("{0}", salesorderblindship.Address1, salesorderblindship.Address2);
        szAddressHlp6 = string.Format("{0}", salesorderblindship.Address2);
        szAddressHlp5 = string.Format("{0} {1} {2}", salesorderblindship.City, salesorderblindship.State, salesorderblindship.Zip);
        szCountry2 = salesorderblindship.Country;
        telHlp = Convert.ToInt64(salesorderblindship.Tel);
        szTel2 = telHlp.ToString(telfmt);
    }
    else
    {
        szFirstName = szTradeName;
        szAddressHlp2 = szAddress;
        szAddressHlp3 = string.Format("{0} {1} {2}", szCity, szState, szZip);

        szFirstName2 = shipto.FirstName;
        szLastName2 = shipto.LastName;
        szCompany2 = soldto.CompanyName;
        szAddressHlp4 = string.Format("{0}", shipto.Address1);
        szAddressHlp5 = string.Format("{0} {1} {2}", shipto.City, shipto.State, shipto.Zip);

    }

    szSalesOrderContact = TimelyDepotMVC.Controllers.InvoiceController.GetOrderContact(Convert.ToInt32(Model.CustomerId));
    szSalesOrderContact = TimelyDepotMVC.Controllers.InvoiceController.GetOrderContact01(Convert.ToInt32(Model.CustomerId));
    
    <div class="darkerline" style="padding-top: 0.5em; padding-bottom: 0.5em; padding-left: 1em; padding-right: 1em; margin-top: 0.5em; margin-bottom: 0.5em;">
        @*<div class="TEdiv">
            <div class="cf">
                <div class="left" style="margin-right: 10em;">
                    <div id="tradeeditselector01id">
                        @Html.DropDownList("tradeId", (IEnumerable<SelectListItem>)ViewBag.TradeList, "Select Trade", new { id = "tradeselectorId" })
                        <div style="display: none;">
                            <input id="tradeId" name="tradeId" type="text" />
                        </div>
                    </div>
                </div>
            </div>
        </div>*@
        <div class="darkerline cf" style="margin-top: 0.5em; margin-bottom: 0.5em; padding-left: 0.5em; padding-right: 0.5em; padding-bottom: 0.5em;">
            <div id="addressvalidationdiv"></div>
            <div style="text-align: center;"><h3>Shipment Information</h3></div>            
            <div class="cf">
                <div class="darkerline right" style="width: 45%; padding: 5px;">
                    <div><h4>Ship To :</h4></div>
                    <div class="viosinput400 boxtb3 right">
                        @Html.EditorFor(model => model.ToCompany)
                        @Html.ValidationMessageFor(model => model.ToCompany)
                    </div>
                    <div class="labelClass">
                        @Html.Label("Company")
                    </div>
                    <div class="viosinput400 boxtb3 right">
                        @Html.EditorFor(model => model.ToName)
                        @Html.ValidationMessageFor(model => model.ToName)
                    </div>
                    <div class="labelClass">
                        @Html.Label("Name")
                    </div>
                    <div class="viosinput400 boxtb3 right">
                        @Html.EditorFor(model => model.ToAddress1)
                        @Html.ValidationMessageFor(model => model.ToAddress1)
                    </div>
                    <div class="labelClass">
                        @Html.Label("Address 1")
                    </div>
                    <div class="viosinput400 boxtb3 right">
                        @Html.EditorFor(model => model.ToAddress2)
                        @Html.ValidationMessageFor(model => model.ToAddress2)
                    </div>
                    <div class="labelClass">
                        @Html.Label("Address 2")
                    </div>
                    <div class="right">
                        <div class="left viosinput120 boxtb3">
                            @Html.TextBoxFor(model => model.ToCity, new { @placeholder = "City" })
                            @Html.ValidationMessageFor(model => model.ToCity)
                        </div>
                        <div class="left viosinput40 boxtb3">
                            @Html.TextBoxFor(model => model.ToState, new { @placeholder = "State" })
                            @Html.ValidationMessageFor(model => model.ToState)
                        </div>
                        <div class="left viosinput60 boxtb3">
                            @Html.TextBoxFor(model => model.ToZip, new { @placeholder = "Zip" })
                            @Html.ValidationMessageFor(model => model.ToZip)
                        </div>
                    </div>
                    <div class="labelClass">
                        @Html.Label("City/State/Zip")
                    </div>
                    <div class="viosinput400 boxtb3 right">
                        @Html.EditorFor(model => model.ToCountry)
                        @Html.ValidationMessageFor(model => model.ToCountry)
                    </div>
                    <div class="labelClass">
                        @Html.Label("Country")
                    </div>
                    <div style="width: 100%;padding-top: 25px;">
                        <input id="btnSaveInvoiceData"  style="float: right;margin-left: 7px;" class="btn btn-default" type="button" name="Edit" value="Save data" />
                        @Html.ActionLink("Validate Address", "ValidateAddressTE", new { invoiceid = Model.InvoiceId }, new { @class = "btnEditSO btn btn-default", @style = "float: right;" })
                    </div>
                    </div>
                <div class="darkerline left" style="width: 45%; padding: 5px;">
                    <div>
                        <h4>Ship From :</h4>
                    </div>
                    <div class="viosinput400 boxtb3 right">
                        @Html.TextBoxFor(model => model.FromCompany, new { @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.FromCompany)
                    </div>
                    <div class="labelClass">
                        @Html.Label("Company")
                    </div>
                    <div class="viosinput400 boxtb3 right">
                        @Html.TextBoxFor(model => model.FromName, new { @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.FromName)
                    </div>
                    <div class="labelClass">
                        @Html.Label("Name")
                    </div>
                    <div class="viosinput400 boxtb3 right">
                        @Html.TextBoxFor(model => model.FromAddress1, new { @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.FromAddress1)
                    </div>
                    <div class="labelClass">
                        @Html.Label("Address 1")
                    </div>
                    <div class="viosinput400 boxtb3 right">
                        @Html.TextBoxFor(model => model.FromAddress2, new { @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.FromAddress2)
                    </div>
                    <div class="labelClass">
                        @Html.Label("Address 2")
                    </div>
                    <div class="cf right">
                        <div class="left viosinput120 boxtb3">
                            @Html.TextBoxFor(model => model.FromCity, new { @placeholder = "City", @readonly="readonly" })
                            @Html.ValidationMessageFor(model => model.FromCity)
                        </div>
                        <div class="left viosinput40 boxtb3">
                            @Html.TextBoxFor(model => model.FromState, new { @placeholder = "State", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.FromState)
                        </div>
                        <div class="left viosinput60 boxtb3">
                            @Html.TextBoxFor(model => model.FromZip, new { @placeholder = "Zip", @readonly = "readonly" })
                            @Html.ValidationMessageFor(model => model.FromZip)
                        </div>
                    </div>
                    <div class="labelClass">
                        @Html.Label("City/State/Zip")
                    </div>
                    <div class="viosinput400 boxtb3 right">
                        @Html.TextBoxFor(model => model.FromCountry, new { @readonly = "readonly" })
                        @Html.ValidationMessageFor(model => model.FromCountry)
                    </div>
                    <div class="labelClass">
                        @Html.Label("Country")
                    </div>
                   
                </div>
                
            </div>
        </div>
        <div class="TEdiv darkerline">
            <div id="salesdetailsid">
            </div>
        </div>
    </div> 
    <div class="TEdiv" style="width: 376px; margin: 0.5em auto;">
        @Html.ActionLink("Quit", "Index", null, new { @class = "btnEditSO btn btn-default" })
    </div>   

}
<div id="selectvendorDialog">
    Select item here
</div>
<div id="hasShipmentDiv" style="display: none;">
    @ViewBag.HayShipments
</div>
<div style="display: none;">
    @Html.ActionLink("Blind Ship", "BlindShip", "Invoice", new { salesorderid = @Model.SalesOrderId, invoiceid = @Model.InvoiceId }, new { id = "lnkBlindShip" })
</div>

<script>
    $(document).ready(function() {
        var token = $('input[name="__RequestVerificationToken"]').val();
        var headers = {};
        headers['__RequestVerificationToken'] = token;
        $('#tradeselector01id').text('     Company Name : @Model.CustomerShipLocation');
       
      //$('#editsalesorderid').submit(publishInvoiceData);

jQuery("#btnSaveInvoiceData").click(postInvoiceData);

        function publishInvoiceData() {
     
            var jsonModel = @Html.Raw(Json.Encode(@Model));
            $.ajax({
                url: '/Shipment/Edit',
                dataType: "json",
                type: "POST",
                contentType: 'application/json; charset=utf-8',
                headers:headers,
                data: JSON.stringify({ invoice: jsonModel }),
                async: true,
                processData: false,
                cache: false,
                success: function(data) {
                    alert("Sue");
                },
                error: function(xhr) {
                    alert(xhr);
                }
            });
        }
    });
</script>





